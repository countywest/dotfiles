# .zshrc
# ======
# vim: set sts=2 sw=2 ts=2

# To profile zsh startup, use the following:
# In ~/.zshrc,
#  (BEGIN) zmodload zsh/zprof
#  (END)   zprof >! ~/.zsh.startup.log
# % repeat 3 {time zsh -i -c exit}


# Default prompt host color for pure theme and tmux statusbar.
# You may want to have different color per machine (use ANSI color name or xterm color codes [0-255]).
#   - https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
# The PROMPT_HOST_COLOR variable can be inherited from a parent shell, tmux, or SSH session.
if [[ -z "$PROMPT_HOST_COLOR" ]]; then
  export PROMPT_HOST_COLOR="6"  # cyan
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# autoload built-in zsh utilities.
autoload -Uz is-at-least


# Source antidote
if [[ ! -s "${ZDOTDIR:-$HOME}/.zsh/antidote/antidote.zsh" ]]; then
  echo -e "\033[0;31m antidote is not installed; please update dotfiles !"
  echo -e "\033[0;33m  Try one of the following: \
       $ dotfiles update\n\
       $ cd ~/.dotfiles && python install.py\
       $ cd ~/.dotfiles && git submodule update --init --recursive\
"
  echo -e "\033[0m"
  return
fi
source "${ZDOTDIR:-$HOME}/.zsh/antidote/antidote.zsh"

# Source the Prezto configuration file.
if [[ -s "${ZDOTDIR:-$HOME}/.zpreztorc" ]]; then
  source "${ZDOTDIR:-$HOME}/.zpreztorc"
fi

# Do not put all usernames as possible candidates for tab completion.
zstyle ':completion:*' users root $USER


# virtualenvwrapper -- use lazy load (see prezto#669)
if (( $+commands[virtualenvwrapper_lazy.sh] )); then
    source "$commands[virtualenvwrapper_lazy.sh]"
fi

# nvm -- sourcing is very slow, use lazy load
if [[ -f "$HOME/.nvm/nvm.sh" ]]; then
  function nvm() {
    unfunction nvm
    source "$HOME/.nvm/nvm.sh"
    nvm "$@"
  }
fi

# Additional zplug from ~/.zshrc.local
if [[ -s "${ZDOTDIR:-$HOME}/.zshrc.local" ]]; then
  source "${ZDOTDIR:-$HOME}/.zshrc.local"
fi

# Misc plugin configs {{{
# -----------------------

# fzf-marks
export FZF_MARKS_JUMP='^g'

# }}}

# ------------------------------------------------------ }}}

# antidote: zsh plugin specifications.
# antidote-managed plugins will be stored at $ANTIDOTE_HOME
export ANTIDOTE_HOME="$HOME/.zsh/antidote-plugins"
export ANTIDOTE_BUNDLE="$HOME/.zsh_plugins.zsh"
zstyle ':antidote:bundle' use-friendly-names on

if [ ! -d "$ANTIDOTE_HOME" ]; then
    echo -e "\033[0;33mInitializing ANTIDOTE and zsh plugins for the first time, please be patient ...\033[0m"
fi

function antidote-load() {
    echo "antidote load is disabled. see ~/.zshrc"
    return 1;
}
function antidote-reset() {
    echo "Removing $ANTIDOTE_BUNDLE ..."
    rm -rf $ANTIDOTE_BUNDLE >/dev/null
}

# antidote: Use static loading (cache) for better performance
# (see antidote#65 for more details)
local -a bundles=()

function _antidote_compile_bundles() {
  local _ANTIDOTE_SAVING="1"
  echo -e "\033[0;33mWriting antidote cache file into $ANTIDOTE_BUNDLE ...\033[0m"

  # TODO: Get rid of prezto, a legacy.
  bundles+=('sorin-ionescu/prezto')

  if is-at-least 5.4; then
    # zsh theme: powerlevel10k + customization
    # p10k's minimum zsh requirement is 5.1 but we require zsh 5.4+,
    # because without the instant mode initialization is slower than pure.
    bundles+=('romkatv/powerlevel10k')
  else
    # zsh theme: pure (forked ver). For OLD zsh.
    bundles+=('mafredri/zsh-async')
    bundles+=('wookayin/pure')
  fi

  # zsh syntax: FSH (fast-syntax-highlighting)
  # theme file (XDG:wook) is at ~/.config/fsh/wook.ini
  bundles+=('z-shell/F-Sy-H')

  # More completion support
  bundles+=('esc/conda-zsh-completion')

  # see ~/.zsh/zsh.d/envs.zsh for fzf configs
  bundles+=('wookayin/fzf-fasd')
  bundles+=('junegunn/fzf-git.sh kind:clone')

  bundles+=('zsh-users/zsh-autosuggestions')
  if (( $+commands[virtualenvwrapper_lazy.sh] || $+commands[conda] )); then
    # Use my own fork for a while, to support autoswitch into anaconda envs
    bundles+=('wookayin/zsh-autoswitch-virtualenv')
  fi
  if [[ "`uname`" == "Darwin" ]]; then
    bundles+=('wookayin/anybar-zsh')
  fi

  printf "%s\n" $bundles | antidote bundle >! "$ANTIDOTE_BUNDLE"
}

# If $ANTIDOTE_BUNDLE is empty (blank) file, refresh the static cache
if [ ! -s "$ANTIDOTE_BUNDLE" ] || ! grep -q '[^[:space:]]' < "$ANTIDOTE_BUNDLE"; then
  _antidote_compile_bundles
fi

# Load the static script for loading zsh plugins.
source $ANTIDOTE_BUNDLE
if [ ! $? -eq 0 ] ; then   # error, refresh the script and try again
    _antidote_compile_bundles
    source $ANTIDOTE_BUNDLE
fi

if [[ -n "$_ANTIDOTE_SAVING" ]]; then
    fast-theme "XDG:wook"
fi

# }}} ===================

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Manually source fzf-git.sh,
# because sourcing it via plugin manager will make shell terminate
if type antidote >/dev/null 2>&1; then
  source $(__antidote_bundledir junegunn/fzf-git.sh)/fzf-git.sh
  bindkey '^g^o' fzf-git-hashes-widget
  bindkey '^go' fzf-git-hashes-widget

else
  # old systems (e.g. Ubuntu 16.04) has low zsh version < 5.4
  # where antidote doesn't load. Fallback to zgen if possible
  echo -e "\033[0;31mERROR: mantidote cannot load (your zsh is too old).\033[0m"
  [[ -f ~/.zgen/init.zsh ]] && { echo "Falling back to zgen..."; source ~/.zgen/init.zsh } || return 0;
fi


# Source zsh script files after loading the zsh plugins.
for config_file (${ZDOTDIR:-$HOME}/.zsh/zsh.d/*.zsh(N)) source $config_file

# Terminal
if [[ $TMUX == "" ]]; then
    # outside tmux
    export TERM="xterm-256color" # Use xterm-256color
else
    # inside tmux
    export TERM="screen-256color" # Use screen-256color for enabling home/end key inside neovim
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.zsh/p10k.zsh ]] || source ~/.zsh/p10k.zsh


# iTerm integration (for OS X iTerm2)
# @see https://iterm2.com/shell_integration.html
if [[ "`uname`" == "Darwin" ]] && [[ -f ${HOME}/.iterm2_shell_integration.zsh ]]; then
    source ${HOME}/.iterm2_shell_integration.zsh
fi

if (( $+commands[iterm-tab-color] )); then
    # set tab color, if it is a new connection to remote through SSH
    function iterm_tab_color_auto() {
        if [ -z "$TMUX" ] && [ -n "$SSH_CONNECTION" ] && [ -n "$PROMPT_HOST_COLOR" ]; then
            iterm-tab-color $PROMPT_HOST_COLOR
        fi
    }
    iterm_tab_color_auto
fi

# Anaconda3
# see ~/.zshenv for $CONDA_EXE detection
function _conda_initialize() {
# >>> conda initialize >>>
if [ -n "${CONDA_EXE}" ]; then
  ${CONDA_EXE} config --set auto_activate_base false
  __conda_setup="$(${CONDA_EXE} 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  fi
  unset __conda_setup
fi
# <<< conda initialize <<<
}
# Note: conda initialize is slow (0.3 sec), so execute lazily
conda() {
  unfunction conda
  _conda_initialize
  conda "$@"
}

if [[ -z "$CONDA_EXE" && -d "/opt/homebrew/Caskroom/miniconda" ]]; then
  echo "Warning: Please install miniconda locally on your HOME, not via Homebrew."
  echo "$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"
  echo "$ ./Miniconda3-latest-MacOSX-x86_64.sh -p $HOME/.miniconda3"
fi

# Optionally, put local startup config (not version controlled) in ~/.zshrc.local
if [ -f "$HOME/.zshrc.local" ]; then
    source "$HOME/.zshrc.local"
fi

# Quick ../../.. from https://github.com/blueyed/oh-my-zsh
resolve-alias() {
    # Recursively resolve aliases and echo the command.
    typeset -a cmd
    cmd=(${(z)1})
    while (( ${+aliases[$cmd[1]]} )) \
	      && [[ ${aliases[$cmd[1]]} != $cmd ]]; do
	cmd=(${(z)aliases[${cmd[1]}]})
    done
    echo $cmd
}
rationalise-dot() {
    local MATCH
    if [[ $LBUFFER =~ '(^|/| |      |'$'\n''|\||;|&)\.\.$' ]]; then
        LBUFFER+=/
        zle self-insert
        zle self-insert
    else
        zle self-insert
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
bindkey -M isearch . self-insert

# CUDA
export PATH=/usr/local/cuda/bin:${PATH}
export LD_LIBRARY_PATH=/usr/local/cuda/lib64/:${LD_LIBRARY_PATH}

# conda
export PATH=${PATH}:~/anaconda3/bin

# mamba
export PATH=${PATH}:~/mambaforge/bin

# xmodmap loading
if command -v xmodmap &> /dev/null
then
    # run xmodmap only when a display is available
    if [ -n "${DISPLAY+x}" ]; then
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            xmodmap ~/.Xmodmap
        fi
    fi
fi

# Hard-coded Linux-like ls color
# when using MacOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    export LSCOLORS='ExGxBxDxCxEgEdxbxgxcxc'
fi

# Even in the Linux(for terminal in apps, ex: vscode)
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    export LS_COLORS=''
    LS_COLORS+='rs=0:'
    LS_COLORS+='di=01;34:'
    LS_COLORS+='ln=01;36:'
    LS_COLORS+='mh=00:'
    LS_COLORS+='pi=40;33:'
    LS_COLORS+='so=01;35:'
    LS_COLORS+='do=01;35:'
    LS_COLORS+='bd=40;33;01:'
    LS_COLORS+='cd=40;33;01:'
    LS_COLORS+='or=40;31;01:'
    LS_COLORS+='mi=00:'
    LS_COLORS+='su=37;41:'
    LS_COLORS+='sg=30;43:'
    LS_COLORS+='ca=30;41:'
    LS_COLORS+='tw=30;42:'
    LS_COLORS+='ow=34;42:'
    LS_COLORS+='st=37;44:'
    LS_COLORS+='ex=01;32:'
    LS_COLORS+='*.tar=01;31:'
    LS_COLORS+='*.tgz=01;31:'
    LS_COLORS+='*.arc=01;31:'
    LS_COLORS+='*.arj=01;31:'
    LS_COLORS+='*.taz=01;31:'
    LS_COLORS+='*.lha=01;31:'
    LS_COLORS+='*.lz4=01;31:'
    LS_COLORS+='*.lzh=01;31:'
    LS_COLORS+='*.lzma=01;31:'
    LS_COLORS+='*.tlz=01;31:'
    LS_COLORS+='*.txz=01;31:'
    LS_COLORS+='*.tzo=01;31:'
    LS_COLORS+='*.t7z=01;31:'
    LS_COLORS+='*.zip=01;31:'
    LS_COLORS+='*.z=01;31:'
    LS_COLORS+='*.dz=01;31:'
    LS_COLORS+='*.gz=01;31:'
    LS_COLORS+='*.lrz=01;31:'
    LS_COLORS+='*.lz=01;31:'
    LS_COLORS+='*.lzo=01;31:'
    LS_COLORS+='*.xz=01;31:'
    LS_COLORS+='*.zst=01;31:'
    LS_COLORS+='*.tzst=01;31:'
    LS_COLORS+='*.bz2=01;31:'
    LS_COLORS+='*.bz=01;31:'
    LS_COLORS+='*.tbz=01;31:'
    LS_COLORS+='*.tbz2=01;31:'
    LS_COLORS+='*.tz=01;31:'
    LS_COLORS+='*.deb=01;31:'
    LS_COLORS+='*.rpm=01;31:'
    LS_COLORS+='*.jar=01;31:'
    LS_COLORS+='*.war=01;31:'
    LS_COLORS+='*.ear=01;31:'
    LS_COLORS+='*.sar=01;31:'
    LS_COLORS+='*.rar=01;31:'
    LS_COLORS+='*.alz=01;31:'
    LS_COLORS+='*.ace=01;31:'
    LS_COLORS+='*.zoo=01;31:'
    LS_COLORS+='*.cpio=01;31:'
    LS_COLORS+='*.7z=01;31:'
    LS_COLORS+='*.rz=01;31:'
    LS_COLORS+='*.cab=01;31:'
    LS_COLORS+='*.wim=01;31:'
    LS_COLORS+='*.swm=01;31:'
    LS_COLORS+='*.dwm=01;31:'
    LS_COLORS+='*.esd=01;31:'
    LS_COLORS+='*.jpg=01;35:'
    LS_COLORS+='*.jpeg=01;35:'
    LS_COLORS+='*.mjpg=01;35:'
    LS_COLORS+='*.mjpeg=01;35:'
    LS_COLORS+='*.gif=01;35:'
    LS_COLORS+='*.bmp=01;35:'
    LS_COLORS+='*.pbm=01;35:'
    LS_COLORS+='*.pgm=01;35:'
    LS_COLORS+='*.ppm=01;35:'
    LS_COLORS+='*.tga=01;35:'
    LS_COLORS+='*.xbm=01;35:'
    LS_COLORS+='*.xpm=01;35:'
    LS_COLORS+='*.tif=01;35:'
    LS_COLORS+='*.tiff=01;35:'
    LS_COLORS+='*.png=01;35:'
    LS_COLORS+='*.svg=01;35:'
    LS_COLORS+='*.svgz=01;35:'
    LS_COLORS+='*.mng=01;35:'
    LS_COLORS+='*.pcx=01;35:'
    LS_COLORS+='*.mov=01;35:'
    LS_COLORS+='*.mpg=01;35:'
    LS_COLORS+='*.mpeg=01;35:'
    LS_COLORS+='*.m2v=01;35:'
    LS_COLORS+='*.mkv=01;35:'
    LS_COLORS+='*.webm=01;35:'
    LS_COLORS+='*.ogm=01;35:'
    LS_COLORS+='*.mp4=01;35:'
    LS_COLORS+='*.m4v=01;35:'
    LS_COLORS+='*.mp4v=01;35:'
    LS_COLORS+='*.vob=01;35:'
    LS_COLORS+='*.qt=01;35:'
    LS_COLORS+='*.nuv=01;35:'
    LS_COLORS+='*.wmv=01;35:'
    LS_COLORS+='*.asf=01;35:'
    LS_COLORS+='*.rm=01;35:'
    LS_COLORS+='*.rmvb=01;35:'
    LS_COLORS+='*.flc=01;35:'
    LS_COLORS+='*.avi=01;35:'
    LS_COLORS+='*.fli=01;35:'
    LS_COLORS+='*.flv=01;35:'
    LS_COLORS+='*.gl=01;35:'
    LS_COLORS+='*.dl=01;35:'
    LS_COLORS+='*.xcf=01;35:'
    LS_COLORS+='*.xwd=01;35:'
    LS_COLORS+='*.yuv=01;35:'
    LS_COLORS+='*.cgm=01;35:'
    LS_COLORS+='*.emf=01;35:'
    LS_COLORS+='*.ogv=01;35:'
    LS_COLORS+='*.ogx=01;35:'
    LS_COLORS+='*.aac=00;36:'
    LS_COLORS+='*.au=00;36:'
    LS_COLORS+='*.flac=00;36:'
    LS_COLORS+='*.m4a=00;36:'
    LS_COLORS+='*.mid=00;36:'
    LS_COLORS+='*.midi=00;36:'
    LS_COLORS+='*.mka=00;36:'
    LS_COLORS+='*.mp3=00;36:'
    LS_COLORS+='*.mpc=00;36:'
    LS_COLORS+='*.ogg=00;36:'
    LS_COLORS+='*.ra=00;36:'
    LS_COLORS+='*.wav=00;36:'
    LS_COLORS+='*.oga=00;36:'
    LS_COLORS+='*.opus=00;36:'
    LS_COLORS+='*.spx=00;36:'
    LS_COLORS+='*.xspf=00;36:'
fi